// <auto-generated />
using System;
using MatchMakings.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchMakings.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250311225824_Create-DB")]
    partial class CreateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MatchMakers");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<int>("NumMeetings")
                        .HasColumnType("int");

                    b.Property<int>("PersonId1")
                        .HasColumnType("int");

                    b.Property<int>("PersonId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchMakerId");

                    b.ToTable("MatchMakings");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchMakingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumMeeting")
                        .HasColumnType("int");

                    b.Property<int>("PersonId1")
                        .HasColumnType("int");

                    b.Property<int>("PersonId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchMakingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BurnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Community")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.MatchMaker", null)
                        .WithMany("Matches")
                        .HasForeignKey("MatchMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Meeting", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.MatchMaking", null)
                        .WithMany("Meetings")
                        .HasForeignKey("MatchMakingId");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaker", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
